"""
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–æ–≤
"""

from core.chord_manager import ChordManager
from data.chord_data import ChordData

class ChordRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∞–∫–∫–æ—Ä–¥–æ–≤"""

    def __init__(self):
        self.chord_manager = ChordManager()
        self.chord_data = ChordData()

    def get_chord_info(self, chord_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–æ—Ä–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å –ë–î
        """
        variants = self.chord_manager.get_chord_variants(chord_name)
        if not variants:
            return None

        chord_id = hash(chord_name) % 100000
        folder = self.chord_data.get_chord_folder(chord_name)
        chord_type = self.chord_data.get_chord_type(chord_name)

        return {
            'id': chord_id,
            'name': chord_name,
            'folder': folder,
            'type': chord_type,
            'variants_count': len(variants),
            'description': self.chord_data.get_chord_description(chord_name)
        }

    def _get_folder_number(self, chord_name):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞"""
        try:
            from const import CHORDS_TYPE_LIST

            for i, chords_list in enumerate(CHORDS_TYPE_LIST, 1):
                if chord_name in chords_list:
                    return i
        except ImportError:
            pass

        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–∞–ø–∫–∏
        folder = self.chord_data.get_chord_folder(chord_name)
        if folder and folder.startswith('group_'):
            try:
                return int(folder.replace('group_', ''))
            except ValueError:
                pass
        return 1

    def get_chord_variants_by_name(self, chord_name, display_type="fingers"):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–∫–∫–æ—Ä–¥–∞ –ø–æ –∏–º–µ–Ω–∏ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ç–∏–ø–æ–≤ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        """
        variants_data = []
        variants = self.chord_manager.get_chord_variants(chord_name)

        if not variants:
            print(f"‚ùå –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return []

        print(f"üéØ –û–±—Ä–∞–±–æ—Ç–∫–∞ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")

        for variant in variants:
            variant_index = variant.get('variant_index', 0)

            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–∏–ø–æ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            variant_data = self.chord_manager.get_chord_variant_data_with_pixmap(
                chord_name, variant_index, display_type
            )

            if variant_data and variant_data['pixmap'] and not variant_data['pixmap'].isNull():
                variants_data.append({
                    'position': variant.get('position', 1),
                    'chord_name': chord_name,
                    'pixmap': variant_data['pixmap'],
                    'sound_path': variant_data['sound_path'],
                    'description': variant_data['description'],
                    'display_type': display_type,
                    'variant_index': variant_index
                })
                print(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {variant.get('position', 1)}: {variant_data['description']}")

        # –°–û–†–¢–ò–†–£–ï–ú –ü–û position —á—Ç–æ–±—ã –ø–µ—Ä–≤—ã–π –≤–∞—Ä–∏–∞–Ω—Ç –±—ã–ª –ø–µ—Ä–≤—ã–º
        variants_data.sort(key=lambda x: x['position'])
        print(f"üéØ –£—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {chord_name}: {len(variants_data)}")

        return variants_data

    def get_chord_image(self, chord_name, variant_index=0, display_type="fingers"):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –∫–∞–∫ QPixmap
        """
        return self.chord_manager.get_chord_image(chord_name, variant_index, display_type)

    def get_chord_sound_path(self, chord_name, variant_index=0):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –∑–≤—É–∫–æ–≤–æ–º—É —Ñ–∞–π–ª—É –∞–∫–∫–æ—Ä–¥–∞
        """
        return self.chord_manager.get_chord_sound_path(chord_name, variant_index)

    def search_chords(self, query):
        """–ü–æ–∏—Å–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        all_chords = self.chord_manager.get_available_chords()
        query = query.lower()

        results = []
        for chord in all_chords:
            if query in chord.lower():
                chord_info = self.get_chord_info(chord)
                if chord_info:
                    results.append(chord_info)

        return results

    def get_chord_description(self, chord_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        return self.chord_manager.get_chord_description(chord_name)

    def is_data_available(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return self.chord_manager.is_data_loaded()

    def get_all_chords(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return self.chord_manager.get_available_chords()

    def get_chords_by_folder(self, folder_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–æ—Ä–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        return self.chord_manager.get_chords_by_folder(folder_num)

    def get_display_types(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return self.chord_manager.get_display_types()

    def get_stats(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö"""
        return self.chord_manager.get_stats()

    def get_chord_variants_count(self, chord_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–∞"""
        variants = self.chord_manager.get_chord_variants(chord_name)
        return len(variants) if variants else 0

    def get_chord_variant_info(self, chord_name, variant_index=0):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º –≤–∞—Ä–∏–∞–Ω—Ç–µ –∞–∫–∫–æ—Ä–¥–∞
        """
        variants = self.chord_manager.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            return None

        variant = variants[variant_index]
        return {
            'position': variant.get('position', variant_index + 1),
            'description': variant.get('description', f'–í–∞—Ä–∏–∞–Ω—Ç {variant_index + 1}'),
            'has_sound': bool(variant.get('sound_data')),
            'json_parameters': variant.get('json_parameters', {})
        }

    def check_chord_exists(self, chord_name):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        return chord_name in self.chord_manager.get_available_chords()

    def get_chord_categories(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–∏/–ø–∞–ø–∫–∏ –∞–∫–∫–æ—Ä–¥–æ–≤"""
        all_chords = self.get_all_chords()
        categories = set()

        for chord in all_chords:
            folder = self.chord_data.get_chord_folder(chord)
            if folder:
                categories.add(folder)

        return sorted(list(categories))

    def get_chords_by_type(self, chord_type):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–æ—Ä–¥—ã –ø–æ —Ç–∏–ø—É (major, minor, etc.)"""
        all_chords = self.get_all_chords()
        result = []

        for chord in all_chords:
            if self.chord_data.get_chord_type(chord).lower() == chord_type.lower():
                result.append(chord)

        return result
"""
–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–æ–≤
"""

from core.chord_manager import ChordManager

class ChordRepository:
    """–†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –¥–∞–Ω–Ω—ã–º –∞–∫–∫–æ—Ä–¥–æ–≤"""

    def __init__(self):
        self.chord_manager = ChordManager()

    def get_chord_info(self, chord_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–æ—Ä–¥–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Å –ë–î
        """
        variants = self.chord_manager.get_chord_variants(chord_name)
        if not variants:
            return None

        chord_id = hash(chord_name) % 100000
        folder = f"folder_{self._get_folder_number(chord_name)}"

        return (chord_id, chord_name, folder, len(variants))

    def _get_folder_number(self, chord_name):
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –Ω–æ–º–µ—Ä –ø–∞–ø–∫–∏ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞"""
        try:
            from const import CHORDS_TYPE_LIST

            for i, chords_list in enumerate(CHORDS_TYPE_LIST, 1):
                if chord_name in chords_list:
                    return i
        except ImportError:
            pass
        return 1

    def get_chord_variants_by_name(self, chord_name):
        """
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–∫–∫–æ—Ä–¥–∞ –ø–æ –∏–º–µ–Ω–∏ - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø
        """
        variants_data = []
        variants = self.chord_manager.get_chord_variants(chord_name)

        if not variants:
            print(f"‚ùå –ù–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return []

        for i, variant in enumerate(variants):
            variant_data = self.chord_manager.get_chord_variant_data(chord_name, i)

            # ‚úÖ –í–ê–ñ–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–∞—Ä–∏–∞–Ω—Ç –¥–∞–∂–µ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            if variant_data and variant_data['image_path']:
                variants_data.append((
                    i + 1,  # position
                    chord_name,
                    variant_data['image_path'],
                    variant_data['sound_path'] if variant_data['sound_path'] else "",  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
                    variant_data['position']
                ))
                print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç {i+1} –¥–ª—è {chord_name}: image={bool(variant_data['image_path'])}, sound={bool(variant_data['sound_path'])}")
            else:
                print(f"‚ùå –ü—Ä–æ–ø—É—â–µ–Ω –≤–∞—Ä–∏–∞–Ω—Ç {i+1} –¥–ª—è {chord_name}: –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")

        print(f"üéØ –í—Å–µ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –¥–ª—è {chord_name}: {len(variants_data)}")
        return variants_data

    def search_chords(self, query):
        """–ü–æ–∏—Å–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ –ø–æ –∑–∞–ø—Ä–æ—Å—É"""
        all_chords = self.chord_manager.get_available_chords()
        query = query.lower()

        return [chord for chord in all_chords if query in chord.lower()]

    def get_chord_description(self, chord_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        return self.chord_manager.get_chord_description(chord_name)

    def is_data_available(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return self.chord_manager.is_data_loaded()
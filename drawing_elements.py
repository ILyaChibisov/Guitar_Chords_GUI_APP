"""
–ú–æ–¥—É–ª—å –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∞–∫–∫–æ—Ä–¥–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö
"""

from PIL import Image, ImageDraw, ImageFont
import math


def draw_chord_elements(draw, drawing_data, display_type, image_size):
    """
    –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç—ã –∞–∫–∫–æ—Ä–¥–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
    """
    print(f"üé® –ù–∞—á–∞–ª–æ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏: {len(drawing_data['elements'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

    try:
        if not drawing_data or 'elements' not in drawing_data:
            print("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
            return

        elements = drawing_data['elements']
        print(f"üìã –í—Å–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {len(elements)}")

        for i, element in enumerate(elements):
            if not isinstance(element, dict):
                print(f"‚ö†Ô∏è –≠–ª–µ–º–µ–Ω—Ç {i} –Ω–µ —Å–ª–æ–≤–∞—Ä—å: {type(element)}")
                continue

            element_type = element.get('type')
            element_data = element.get('data', {})

            print(f"üîç –≠–ª–µ–º–µ–Ω—Ç {i}: {element_type}, –¥–∞–Ω–Ω—ã–µ: {list(element_data.keys())}")

            try:
                if element_type == 'fret':
                    print(f"  üéØ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –ª–∞–¥–∞: {element_data.get('symbol', '')}")
                    draw_fret(draw, element_data)
                elif element_type == 'note':
                    print(f"  üéØ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –Ω–æ—Ç—ã: {element_data.get('display_text', '')}")
                    draw_note(draw, element_data, display_type, image_size)
                elif element_type == 'barre':
                    print(f"  üéØ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –±–∞—Ä—Ä—ç")
                    draw_barre(draw, element_data)
                else:
                    print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —ç–ª–µ–º–µ–Ω—Ç–∞: {element_type}")

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —ç–ª–µ–º–µ–Ω—Ç–∞ {element_type}: {e}")
                import traceback
                traceback.print_exc()

        print("‚úÖ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ draw_chord_elements: {e}")
        import traceback
        traceback.print_exc()


def draw_fret(draw, data):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –ª–∞–¥"""
    try:
        x = data.get('x', 0)
        y = data.get('y', 0)
        symbol = data.get('symbol', '')
        color = tuple(data.get('color', [0, 0, 0]))
        size = data.get('size', 60)

        print(f"    üìç –õ–∞–¥: {symbol} –Ω–∞ ({x}, {y})")

        # –°–æ–∑–¥–∞–µ–º —à—Ä–∏—Ñ—Ç
        try:
            font = ImageFont.truetype("arial.ttf", size // 2)
        except:
            try:
                font = ImageFont.truetype("times.ttf", size // 2)
            except:
                font = ImageFont.load_default()

        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        bbox = draw.textbbox((x, y), symbol, font=font)
        text_width = bbox[2] - bbox[0]
        text_height = bbox[3] - bbox[1]

        text_x = x - text_width // 2
        text_y = y - text_height // 2

        draw.text((text_x, text_y), symbol, fill=color, font=font)
        print(f"    ‚úÖ –õ–∞–¥ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –ª–∞–¥–∞: {e}")


def draw_note(draw, data, display_type, image_size):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –Ω–æ—Ç—É/–ø–∞–ª–µ—Ü"""
    try:
        x = data.get('x', 0)
        y = data.get('y', 0)
        radius = data.get('radius', 52)
        display_text = data.get('display_text', 'symbol')

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        if display_text == 'finger':
            text = data.get('finger', '')
        elif display_text == 'note_name':
            text = data.get('note_name', '')
        else:
            text = data.get('symbol', '')

        print(f"    üìç –ù–æ—Ç–∞: {text} –Ω–∞ ({x}, {y}), —Ä–∞–¥–∏—É—Å: {radius}")

        # –ü–†–û–°–¢–´–ï –¶–í–ï–¢–ê
        fill_color = (255, 215, 0)  # –Ø—Ä–∫–æ-–∂–µ–ª—Ç—ã–π
        outline_color = (0, 0, 0)   # –ß–µ—Ä–Ω—ã–π
        text_color = (0, 0, 0)      # –ß–µ—Ä–Ω—ã–π

        # –†–∏—Å—É–µ–º –∫—Ä—É–≥
        bbox = [x - radius, y - radius, x + radius, y + radius]
        print(f"    üîµ –ö—Ä—É–≥: {bbox}")

        draw.ellipse(bbox, fill=fill_color, outline=outline_color, width=3)
        print(f"    ‚úÖ –ö—Ä—É–≥ –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω")

        # –†–∏—Å—É–µ–º —Ç–µ–∫—Å—Ç
        if text:
            try:
                font_size = max(radius // 2, 20)
                print(f"    üî§ –¢–µ–∫—Å—Ç: '{text}', —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {font_size}")

                font = ImageFont.truetype("arial.ttf", font_size)
                bbox = draw.textbbox((x, y), text, font=font)
                text_width = bbox[2] - bbox[0]
                text_height = bbox[3] - bbox[1]

                text_x = x - text_width // 2
                text_y = y - text_height // 2

                draw.text((text_x, text_y), text, fill=text_color, font=font)
                print(f"    ‚úÖ –¢–µ–∫—Å—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω")

            except Exception as font_error:
                print(f"    ‚ö†Ô∏è –û—à–∏–±–∫–∞ —à—Ä–∏—Ñ—Ç–∞: {font_error}")
                font = ImageFont.load_default()
                bbox = draw.textbbox((x, y), text, font=font)
                text_x = x - (bbox[2] - bbox[0]) // 2
                text_y = y - (bbox[3] - bbox[1]) // 2
                draw.text((text_x, text_y), text, fill=text_color, font=font)
                print(f"    ‚úÖ –¢–µ–∫—Å—Ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω (–∑–∞–ø–∞—Å–Ω–æ–π —à—Ä–∏—Ñ—Ç)")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –Ω–æ—Ç—ã: {e}")
        import traceback
        traceback.print_exc()


def draw_barre(draw, data):
    """–û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ—Ç –±–∞—Ä—Ä—ç"""
    try:
        x = data.get('x', 0)
        y = data.get('y', 0)
        width = data.get('width', 100)
        height = data.get('height', 320)
        radius = data.get('radius', 50)

        print(f"    üìç –ë–∞—Ä—Ä—ç: ({x}, {y}), —Ä–∞–∑–º–µ—Ä: {width}x{height}")

        # –ü–†–û–°–¢–û–ô –¶–í–ï–¢
        fill_color = (189, 183, 107)  # –¶–≤–µ—Ç –±–∞—Ä—Ä—ç
        outline_color = (0, 0, 0)     # –ß–µ—Ä–Ω—ã–π –∫–æ–Ω—Ç—É—Ä

        # –†–∏—Å—É–µ–º –∑–∞–∫—Ä—É–≥–ª–µ–Ω–Ω—ã–π –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫
        bbox = [x - width//2, y - height//2, x + width//2, y + height//2]
        print(f"    üü¶ –ü—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫: {bbox}")

        draw.rounded_rectangle(bbox, radius=radius, fill=fill_color, outline=outline_color, width=3)
        print(f"    ‚úÖ –ë–∞—Ä—Ä—ç –æ—Ç—Ä–∏—Å–æ–≤–∞–Ω")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –±–∞—Ä—Ä—ç: {e}")
        import traceback
        traceback.print_exc()
#!/usr/bin/env python3
"""
–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∞–∫–∫–æ—Ä–¥–æ–≤ —Å–æ —Å–∂–∞—Ç–∏–µ–º
"""

import os
import sys
import base64
from pathlib import Path

try:
    from PIL import Image
    import io

    HAS_PILLOW = True
except ImportError:
    print("‚ùå Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")
    HAS_PILLOW = False
    sys.exit(1)


class ChordStructureConverter:
    """–û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä —Å–æ —Å–∂–∞—Ç–∏–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""

    def __init__(self, chords_base_dir):
        self.chords_base_dir = Path(chords_base_dir)
        self.converted_data = {}
        self.compression_stats = {
            'original_size': 0,
            'compressed_size': 0,
            'images_optimized': 0,
            'sounds_optimized': 0,
            'chords_with_sound': 0,
            'chords_without_sound': 0
        }

    def optimize_image(self, image_path, max_size=(400, 200), quality=85):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: —É–º–µ–Ω—å—à–∞–µ—Ç —Ä–∞–∑–º–µ—Ä –∏ –∫–∞—á–µ—Å—Ç–≤–æ"""
        try:
            with Image.open(image_path) as img:
                if img.mode in ('RGBA', 'P'):
                    img = img.convert('RGB')

                img.thumbnail(max_size, Image.Resampling.LANCZOS)

                buffer = io.BytesIO()
                img.save(buffer, format='JPEG', quality=quality, optimize=True)

                optimized_data = buffer.getvalue()

                original_size = os.path.getsize(image_path)
                self.compression_stats['original_size'] += original_size
                self.compression_stats['compressed_size'] += len(optimized_data)
                self.compression_stats['images_optimized'] += 1

                print(f"    üìä –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: {original_size / 1024:.1f}KB ‚Üí {len(optimized_data) / 1024:.1f}KB")

                return optimized_data

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ {image_path}: {e}")
            return None

    def optimize_sound(self, sound_path):
        """–û–ø—Ç–∏–º–∏–∑–∏—Ä—É–µ—Ç –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª (–ø–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—Ä—É–µ—Ç)"""
        try:
            with open(sound_path, 'rb') as file:
                sound_data = file.read()

            original_size = os.path.getsize(sound_path)
            self.compression_stats['original_size'] += original_size
            self.compression_stats['compressed_size'] += len(sound_data)
            self.compression_stats['sounds_optimized'] += 1

            print(f"    üîä –ó–≤—É–∫: {original_size / 1024:.1f}KB ‚Üí {len(sound_data) / 1024:.1f}KB")

            return sound_data

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∑–≤—É–∫–∞ {sound_path}: {e}")
            return None

    def file_to_optimized_base64(self, file_path, is_image=True):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç —Ñ–∞–π–ª –≤ –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π base64"""
        try:
            if is_image:
                optimized_data = self.optimize_image(file_path)
                if optimized_data:
                    return base64.b64encode(optimized_data).decode('utf-8')
            else:
                optimized_data = self.optimize_sound(file_path)
                if optimized_data:
                    return base64.b64encode(optimized_data).decode('utf-8')

        except Exception as e:
            print(f"    ‚ùå –û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {file_path}: {e}")
            return None
        return None

    def scan_chords_structure(self):
        """–°–∫–∞–Ω–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä—É –ø–∞–ø–æ–∫ —Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–µ–π"""
        print("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –∞–∫–∫–æ—Ä–¥–æ–≤...")

        for folder_num in range(1, 19):
            folder_path = self.chords_base_dir / str(folder_num)

            if not folder_path.exists():
                print(f"‚ö†Ô∏è –ü–∞–ø–∫–∞ {folder_num} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                continue

            print(f"üìÅ –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞–ø–∫–∏ {folder_num}...")

            chords_list = self.get_chords_for_folder(folder_num)
            if not chords_list:
                print(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω —Å–ø–∏—Å–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è –ø–∞–ø–∫–∏ {folder_num}")
                continue

            for chord_name in chords_list:
                chord_folder = folder_path / chord_name
                if chord_folder.exists() and chord_folder.is_dir():
                    self.process_chord_folder(chord_name, chord_folder, folder_num)

    def get_chords_for_folder(self, folder_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫–∫–æ—Ä–¥–æ–≤ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        try:
            project_root = Path(__file__).parent.parent
            sys.path.insert(0, str(project_root))

            from const import CHORDS_TYPE_LIST

            if 1 <= folder_num <= len(CHORDS_TYPE_LIST):
                return CHORDS_TYPE_LIST[folder_num - 1]
            return []
        except ImportError as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å const.py: {e}")
            return []

    def get_chord_description(self, chord_name, folder_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        try:
            from const import CHORDS_TYPE_NAME_LIST_DSR

            if 1 <= folder_num <= len(CHORDS_TYPE_NAME_LIST_DSR):
                descriptions = CHORDS_TYPE_NAME_LIST_DSR[folder_num - 1]
                chords_list = self.get_chords_for_folder(folder_num)

                if chord_name in chords_list:
                    index = chords_list.index(chord_name)
                    if index < len(descriptions):
                        return descriptions[index]
            return f"–ê–∫–∫–æ—Ä–¥ {chord_name}"
        except ImportError:
            return f"–ê–∫–∫–æ—Ä–¥ {chord_name}"

    def process_chord_folder(self, chord_name, chord_folder, folder_num):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–∞–ø–∫—É —Å –∞–∫–∫–æ—Ä–¥–æ–º"""
        print(f"  üéµ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–∫–∫–æ—Ä–¥–∞: {chord_name}")

        variants = []
        image_files = []
        sound_files = []

        for file_path in chord_folder.iterdir():
            if file_path.is_file():
                if file_path.suffix.lower() in ['.png', '.jpg', '.jpeg']:
                    image_files.append(file_path)
                elif file_path.suffix.lower() in ['.mp3', '.wav']:
                    sound_files.append(file_path)

        image_files.sort()
        sound_files.sort()

        has_sound = False

        for i, img_file in enumerate(image_files):
            variant_data = {
                'position': i + 1,
                'description': f"–í–∞—Ä–∏–∞–Ω—Ç {i + 1}",
                'image_data': self.file_to_optimized_base64(img_file, is_image=True),
                'sound_data': None
            }

            if i < len(sound_files):
                sound_data = self.file_to_optimized_base64(sound_files[i], is_image=False)
                if sound_data:
                    variant_data['sound_data'] = sound_data
                    has_sound = True
            else:
                sound_file = self.find_matching_sound(img_file, sound_files)
                if sound_file:
                    sound_data = self.file_to_optimized_base64(sound_file, is_image=False)
                    if sound_data:
                        variant_data['sound_data'] = sound_data
                        has_sound = True

            if variant_data['image_data']:
                variants.append(variant_data)

        if variants:
            chord_data = {
                'name': chord_name,
                'folder': f'folder_{folder_num}',
                'description': self.get_chord_description(chord_name, folder_num),
                'variants': variants
            }
            self.converted_data[chord_name] = chord_data

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–≤—É–∫—É
            if has_sound:
                self.compression_stats['chords_with_sound'] += 1
                sound_status = "üîä —Å–æ –∑–≤—É–∫–æ–º"
            else:
                self.compression_stats['chords_without_sound'] += 1
                sound_status = "üîá –±–µ–∑ –∑–≤—É–∫–∞"

            print(f"  ‚úÖ –ê–∫–∫–æ—Ä–¥ {chord_name}: {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤, {sound_status}")
        else:
            print(f"  ‚ùå –ê–∫–∫–æ—Ä–¥ {chord_name}: –Ω–µ—Ç –≤–∞–ª–∏–¥–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")

    def find_matching_sound(self, image_file, sound_files):
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∑–≤—É–∫–æ–≤–æ–π —Ñ–∞–π–ª"""
        img_stem = image_file.stem
        patterns = [img_stem, img_stem.split('_')[0]]

        for pattern in patterns:
            for sound_file in sound_files:
                if pattern in sound_file.stem:
                    return sound_file
        return None

    def save_chords_data(self, output_file):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¢–û–õ–¨–ö–û –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ñ–∞–π–ª"""
        print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ {output_file}...")

        with open(output_file, 'w', encoding='utf-8') as f:
            f.write('"""\n')
            f.write('–î–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ base64\n')
            f.write('–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–æ–º\n')
            f.write('"""\n\n')

            f.write('CHORDS_DATA = {\n')

            for chord_name, chord_data in sorted(self.converted_data.items()):
                f.write(f'    "{chord_name}": {{\n')
                f.write(f'        "name": "{chord_data["name"]}",\n')
                f.write(f'        "folder": "{chord_data["folder"]}",\n')
                f.write(f'        "description": "{chord_data["description"]}",\n')
                f.write(f'        "variants": [\n')

                for variant in chord_data['variants']:
                    f.write('            {\n')
                    f.write(f'                "position": {variant["position"]},\n')
                    f.write(f'                "description": "{variant["description"]}",\n')

                    if variant['image_data']:
                        image_data = self.split_long_string(variant['image_data'], 100)
                        f.write(f'                "image_data": """{image_data}""",\n')
                    else:
                        f.write(f'                "image_data": None,\n')

                    if variant['sound_data']:
                        sound_data = self.split_long_string(variant['sound_data'], 100)
                        f.write(f'                "sound_data": """{sound_data}"""\n')
                    else:
                        f.write(f'                "sound_data": None\n')

                    f.write('            },\n')

                f.write('        ]\n')
                f.write('    },\n')

            f.write('}\n')

    def split_long_string(self, long_string, line_length):
        """–†–∞–∑–±–∏–≤–∞–µ—Ç –¥–ª–∏–Ω–Ω—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫"""
        return '\\\n'.join([long_string[i:i + line_length]
                            for i in range(0, len(long_string), line_length)])

    def print_compression_stats(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–∂–∞—Ç–∏—è"""
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏:")
        print(f"   üñºÔ∏è –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π: {self.compression_stats['images_optimized']}")
        print(f"   üîä –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –∑–≤—É–∫–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤: {self.compression_stats['sounds_optimized']}")
        print(f"   üì¶ –ò—Å—Ö–æ–¥–Ω—ã–π —Ä–∞–∑–º–µ—Ä: {self.compression_stats['original_size'] / 1024 / 1024:.2f} MB")
        print(f"   üóúÔ∏è –°–∂–∞—Ç—ã–π —Ä–∞–∑–º–µ—Ä: {self.compression_stats['compressed_size'] / 1024 / 1024:.2f} MB")

        if self.compression_stats['original_size'] > 0:
            ratio = (1 - self.compression_stats['compressed_size'] / self.compression_stats['original_size']) * 100
            print(f"   üìà –≠–∫–æ–Ω–æ–º–∏—è: {ratio:.1f}%")

        print(f"   üéµ –ê–∫–∫–æ—Ä–¥–æ–≤ —Å–æ –∑–≤—É–∫–æ–º: {self.compression_stats['chords_with_sound']}")
        print(f"   üîá –ê–∫–∫–æ—Ä–¥–æ–≤ –±–µ–∑ –∑–≤—É–∫–∞: {self.compression_stats['chords_without_sound']}")
        print(f"   üé∏ –í—Å–µ–≥–æ –∞–∫–∫–æ—Ä–¥–æ–≤: {len(self.converted_data)}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
    print("üé∏ –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∞–∫–∫–æ—Ä–¥–æ–≤")
    print("=" * 50)

    if not HAS_PILLOW:
        print("‚ùå Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")
        return

    possible_paths = [
        Path("chords"),
        Path("–∞–∫–∫–æ—Ä–¥—ã"),
        Path("data/chords"),
        Path("../chords"),
        Path("C:/guitar_chords"),
        Path("D:/guitar_chords"),
    ]

    chords_directory = None
    for path in possible_paths:
        if path.exists() and path.is_dir():
            chords_directory = path
            break

    if not chords_directory:
        user_path = input("üìÅ –í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞–∫–∫–æ—Ä–¥–∞–º–∏: ").strip('"\' ')
        chords_directory = Path(user_path)

    if not chords_directory.exists():
        print(f"‚ùå –ü–∞–ø–∫–∞ {chords_directory} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
        return

    print(f"‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–∞–ø–∫–∞: {chords_directory}")

    os.makedirs('data', exist_ok=True)
    data_file = "data/chords_data.py"

    try:
        converter = ChordStructureConverter(chords_directory)
        converter.scan_chords_structure()

        if not converter.converted_data:
            print("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏!")
            return

        converter.save_chords_data(data_file)
        converter.print_compression_stats()

        print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –§–∞–π–ª: {data_file}")

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
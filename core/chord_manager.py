import base64
import tempfile
import os
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import QBuffer, QIODevice

try:
    from data.chords_data import CHORDS_DATA  # ‚¨ÖÔ∏è –ü–†–Ø–ú–û–ô –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–•

    CHORD_DATA_AVAILABLE = True
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω–æ: {len(CHORDS_DATA)} –∞–∫–∫–æ—Ä–¥–æ–≤")

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤:")
    test_chords = ['Bbm', 'Db', 'C', 'G', 'D', 'Am', 'Em', 'D6']  # –î–æ–±–∞–≤–∏–ª D6 –¥–ª—è —Ç–µ—Å—Ç–∞
    for chord in test_chords:
        exists = chord in CHORDS_DATA
        status = "‚úÖ" if exists else "‚ùå"
        print(f"   {status} {chord}: {'–Ω–∞–π–¥–µ–Ω' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")

except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤: {e}")
    CHORD_DATA_AVAILABLE = False
    CHORDS_DATA = {}


class ChordData:
    """–ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–æ–≤"""

    @classmethod
    def get_chord_data(cls, chord_name):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–∞ –ø–æ –∏–º–µ–Ω–∏"""
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        names_to_try = [
            chord_name,
            chord_name.upper(),
            chord_name.upper().replace('M', '').replace('–ú', ''),
            chord_name.upper().replace('M', 'm').replace('–ú', 'm'),
            chord_name.upper().replace('6', '').replace('7', '').replace('9', ''),  # –¥–ª—è –∞–∫–∫–æ—Ä–¥–æ–≤ —Ç–∏–ø–∞ D6
        ]

        for name in names_to_try:
            if name in CHORDS_DATA:
                print(f"‚úÖ –ê–∫–∫–æ—Ä–¥ '{chord_name}' –Ω–∞–π–¥–µ–Ω –∫–∞–∫ '{name}'")
                return CHORDS_DATA[name]

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        available_chords = list(CHORDS_DATA.keys())
        print(f"‚ùå –ê–∫–∫–æ—Ä–¥ '{chord_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã: {', '.join(sorted(available_chords)[:10])}...")
        return None

    @classmethod
    def get_all_chords(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return list(CHORDS_DATA.keys())

    @classmethod
    def get_chords_by_folder(cls, folder_num):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–æ—Ä–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        folder_name = f'folder_{folder_num}'
        return [chord for chord, data in CHORDS_DATA.items()
                if data.get('folder') == folder_name]

    @classmethod
    def get_chord_description(cls, chord_name):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        chord_data = cls.get_chord_data(chord_name)
        if chord_data:
            return chord_data.get('description', f'–ê–∫–∫–æ—Ä–¥ {chord_name}')
        return f'–ê–∫–∫–æ—Ä–¥ {chord_name}'

    @classmethod
    def is_data_available(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return CHORD_DATA_AVAILABLE and len(CHORDS_DATA) > 0


class ChordManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"""

    def __init__(self):
        self.temp_files = []
        self._setup_temp_dir()

        if not ChordData.is_data_available():
            print("‚ùå –î–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä.")
        else:
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –î–æ—Å—Ç—É–ø–Ω–æ: {len(ChordData.get_all_chords())} –∞–∫–∫–æ—Ä–¥–æ–≤")

    def _setup_temp_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
        self.temp_dir = tempfile.mkdtemp(prefix="guitar_chords_")

    def get_chord_variants(self, chord_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–∫–∫–æ—Ä–¥–∞"""
        if not ChordData.is_data_available():
            return []

        chord_data = ChordData.get_chord_data(chord_name)
        if not chord_data:
            print(f"‚ùå –ê–∫–∫–æ—Ä–¥ '{chord_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
            return []

        variants = chord_data.get('variants', [])
        print(f"‚úÖ –ê–∫–∫–æ—Ä–¥ '{chord_name}': –Ω–∞–π–¥–µ–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return variants

    def get_chord_description(self, chord_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        return ChordData.get_chord_description(chord_name)

    def base64_to_pixmap(self, base64_data):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 –≤ QPixmap —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"""
        try:
            if not base64_data:
                return QPixmap()

            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫ –≤ base64 –¥–∞–Ω–Ω—ã—Ö
            clean_base64 = base64_data.replace('\n', '').replace('\\', '')
            image_data = base64.b64decode(clean_base64)

            # –°–æ–∑–¥–∞–µ–º QImage –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            image = QImage()
            image.loadFromData(image_data)

            if image.isNull():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QImage –∏–∑ base64 –¥–∞–Ω–Ω—ã—Ö")
                return QPixmap()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            if image.hasAlphaChannel():
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é –∏—Å–ø–æ–ª—å–∑—É–µ–º Format_ARGB32
                image = image.convertToFormat(QImage.Format_ARGB32)
                print("üé® –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é")
            else:
                # –î–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º Format_RGB32
                image = image.convertToFormat(QImage.Format_RGB32)
                print("üñºÔ∏è –ó–∞–≥—Ä—É–∂–µ–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏")

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º QImage –≤ QPixmap
            pixmap = QPixmap.fromImage(image)

            if pixmap.isNull():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QPixmap –∏–∑ QImage")
                return QPixmap()

            return pixmap

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pixmap: {e}")
            return QPixmap()

    def base64_to_temp_file(self, base64_data, extension):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ base64 –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not base64_data:
                return None

            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫ –≤ base64 –¥–∞–Ω–Ω—ã—Ö
            clean_base64 = base64_data.replace('\n', '').replace('\\', '')
            file_data = base64.b64decode(clean_base64)
            temp_file = tempfile.NamedTemporaryFile(
                delete=False,
                suffix=extension,
                dir=self.temp_dir
            )
            temp_file.write(file_data)
            temp_file.close()
            self.temp_files.append(temp_file.name)
            return temp_file.name
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None

    def get_chord_image(self, chord_name, variant_index=0):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –∫–∞–∫ QPixmap"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            print(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {variant_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return QPixmap()

        variant = variants[variant_index]
        image_data = variant.get('image_data')
        if not image_data:
            print(f"‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index} –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return QPixmap()

        pixmap = self.base64_to_pixmap(image_data)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å
        if not pixmap.isNull():
            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π QImage –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            temp_image = pixmap.toImage()
            if temp_image.hasAlphaChannel():
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ '{chord_name}' –∏–º–µ–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω")
            else:
                print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ '{chord_name}' –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏")

        return pixmap

    def get_chord_sound_path(self, chord_name, variant_index=0):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∑–≤—É–∫–æ–≤–æ–º—É —Ñ–∞–π–ª—É"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            return None

        sound_data = variants[variant_index].get('sound_data')
        if not sound_data:
            print(f"‚ö†Ô∏è –ù–µ—Ç –∑–≤—É–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index} –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return None

        return self.base64_to_temp_file(sound_data, '.mp3')

    def get_chord_variant_data(self, chord_name, variant_index=0):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∞–∫–∫–æ—Ä–¥–∞ - –£–õ–£–ß–®–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            print(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {variant_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return None

        variant = variants[variant_index]

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ –∑–≤—É–∫–∞
        image_path = self.base64_to_temp_file(variant.get('image_data'), '.png')
        sound_path = self.base64_to_temp_file(variant.get('sound_data'), '.mp3')

        # ‚úÖ –í–ê–ñ–ù–û: –∑–≤—É–∫ –º–æ–∂–µ—Ç –±—ã—Ç—å None, –Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å
        if not image_path:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index} –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return None

        result = {
            'image_path': image_path,
            'sound_path': sound_path,  # –º–æ–∂–µ—Ç –±—ã—Ç—å None
            'description': variant.get('description', ''),
            'position': variant.get('position', 0)
        }

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index}: image={bool(image_path)}, sound={bool(sound_path)}")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
        if image_path and os.path.exists(image_path):
            pixmap = QPixmap(image_path)
            if not pixmap.isNull():
                temp_image = pixmap.toImage()
                if temp_image.hasAlphaChannel():
                    print(f"üé® –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–º–µ–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω—ã–π —Ñ–æ–Ω: {os.path.basename(image_path)}")
                else:
                    print(f"üñºÔ∏è –í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏: {os.path.basename(image_path)}")

        return result

    def get_chord_variant_data_with_pixmap(self, chord_name, variant_index=0):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∞–∫–∫–æ—Ä–¥–∞ —Å –≥–æ—Ç–æ–≤—ã–º QPixmap"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            return None

        variant = variants[variant_index]

        # –°–æ–∑–¥–∞–µ–º QPixmap –Ω–∞–ø—Ä—è–º—É—é –∏–∑ base64
        pixmap = self.base64_to_pixmap(variant.get('image_data'))

        if pixmap.isNull():
            return None

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–≤—É–∫–∞
        sound_path = self.base64_to_temp_file(variant.get('sound_data'), '.mp3')

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ QImage
        temp_image = pixmap.toImage()
        has_transparency = temp_image.hasAlphaChannel()

        result = {
            'pixmap': pixmap,
            'sound_path': sound_path,
            'description': variant.get('description', ''),
            'position': variant.get('position', 0),
            'has_transparency': has_transparency
        }

        transparency_status = "—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é" if has_transparency else "–±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"
        print(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {variant_index} –∑–∞–≥—Ä—É–∂–µ–Ω: {transparency_status}")

        return result

    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for temp_file in self.temp_files:
            try:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_file}: {e}")

        self.temp_files.clear()

    def get_available_chords(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return ChordData.get_all_chords()

    def get_chords_by_folder(self, folder_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–æ—Ä–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏ (1-18)"""
        return ChordData.get_chords_by_folder(folder_num)

    def is_data_loaded(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return ChordData.is_data_available()

    def check_chord_transparency(self, chord_name, variant_index=0):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏ —É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∞–∫–∫–æ—Ä–¥–∞"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            return False

        variant = variants[variant_index]
        image_data = variant.get('image_data')
        if not image_data:
            return False

        pixmap = self.base64_to_pixmap(image_data)
        if pixmap.isNull():
            return False

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å —á–µ—Ä–µ–∑ QImage
        temp_image = pixmap.toImage()
        has_transparency = temp_image.hasAlphaChannel()

        status = "–∏–º–µ–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å" if has_transparency else "–±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"
        print(f"üîç –ê–∫–∫–æ—Ä–¥ '{chord_name}' –≤–∞—Ä–∏–∞–Ω—Ç {variant_index}: {status}")

        return has_transparency

    def get_chord_image_direct(self, chord_name, variant_index=0):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç QPixmap –Ω–∞–ø—Ä—è–º—É—é –±–µ–∑ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            return QPixmap()

        variant = variants[variant_index]
        image_data = variant.get('image_data')
        if not image_data:
            return QPixmap()

        return self.base64_to_pixmap(image_data)
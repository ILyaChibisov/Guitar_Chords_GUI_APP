import base64
import tempfile
import os
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import QBuffer, QIODevice
import io
import json



try:
    from data.chords_data import CHORDS_DATA  # ‚¨ÖÔ∏è –ü–†–Ø–ú–û–ô –ò–ú–ü–û–†–¢ –î–ê–ù–ù–´–•

    CHORD_DATA_AVAILABLE = True
    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –ê–∫–∫–æ—Ä–¥–æ–≤: {len(CHORDS_DATA.get('chords', {}))}")
    print(f"‚úÖ –®–∞–±–ª–æ–Ω: {'–µ—Å—Ç—å' if CHORDS_DATA.get('template_image') else '–Ω–µ—Ç'}")
    print(f"‚úÖ JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–µ—Å—Ç—å' if CHORDS_DATA.get('original_json_config') else '–Ω–µ—Ç'}")

    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤:")
    test_chords = ['A', 'B', 'C', 'G', 'D', 'Am', 'Em', 'D6']
    chords_dict = CHORDS_DATA.get('chords', {})
    for chord in test_chords:
        exists = chord in chords_dict
        status = "‚úÖ" if exists else "‚ùå"
        print(f"   {status} {chord}: {'–Ω–∞–π–¥–µ–Ω' if exists else '–Ω–µ –Ω–∞–π–¥–µ–Ω'}")

except ImportError as e:
    print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤: {e}")
    CHORD_DATA_AVAILABLE = False
    CHORDS_DATA = {}

# –ò–º–ø–æ—Ä—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
try:
    from PIL import Image, ImageDraw

    HAS_PILLOW = True
except ImportError:
    HAS_PILLOW = False
    print("‚ùå Pillow –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install Pillow")

try:
    from drawing_elements import draw_chord_elements

    HAS_DRAWING = True
except ImportError as e:
    HAS_DRAWING = False
    print(f"‚ùå –ú–æ–¥—É–ª—å drawing_elements –Ω–µ –Ω–∞–π–¥–µ–Ω: {e}")


class ChordData:
    """–ö–ª–∞—Å—Å-–æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–æ–≤"""

    @classmethod
    def get_chord_data(cls, chord_name):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–∞ –ø–æ –∏–º–µ–Ω–∏"""
        chords_dict = CHORDS_DATA.get('chords', {})

        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –Ω–∞–ø–∏—Å–∞–Ω–∏—è
        names_to_try = [
            chord_name,
            chord_name.upper(),
            chord_name.upper().replace('M', '').replace('–ú', ''),
            chord_name.upper().replace('M', 'm').replace('–ú', 'm'),
            chord_name.upper().replace('6', '').replace('7', '').replace('9', ''),
        ]

        for name in names_to_try:
            if name in chords_dict:
                print(f"‚úÖ –ê–∫–∫–æ—Ä–¥ '{chord_name}' –Ω–∞–π–¥–µ–Ω –∫–∞–∫ '{name}'")
                return chords_dict[name]

        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –≤—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        available_chords = list(chords_dict.keys())
        print(f"‚ùå –ê–∫–∫–æ—Ä–¥ '{chord_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
        if available_chords:
            print(f"   –î–æ—Å—Ç—É–ø–Ω—ã–µ –∞–∫–∫–æ—Ä–¥—ã: {', '.join(sorted(available_chords)[:10])}...")
        return None

    @classmethod
    def get_all_chords(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return list(CHORDS_DATA.get('chords', {}).keys())

    @classmethod
    def get_chords_by_folder(cls, folder_num):
        """–ü–æ–ª—É—á–∏—Ç—å –∞–∫–∫–æ—Ä–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        folder_name = f'group_{folder_num}'
        chords_dict = CHORDS_DATA.get('chords', {})
        return [chord for chord, data in chords_dict.items()
                if data.get('folder') == folder_name]

    @classmethod
    def get_chord_description(cls, chord_name):
        """–ü–æ–ª—É—á–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        chord_data = cls.get_chord_data(chord_name)
        if chord_data:
            return chord_data.get('description', f'–ê–∫–∫–æ—Ä–¥ {chord_name}')
        return f'–ê–∫–∫–æ—Ä–¥ {chord_name}'

    @classmethod
    def is_data_available(cls):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–∞–Ω–Ω—ã—Ö"""
        return CHORD_DATA_AVAILABLE and len(CHORDS_DATA.get('chords', {})) > 0

    @classmethod
    def get_template_image(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —à–∞–±–ª–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return CHORDS_DATA.get('template_image')

    @classmethod
    def get_display_types(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return ["fingers", "notes"]

    @classmethod
    def get_original_json_config(cls):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return CHORDS_DATA.get('original_json_config', {})

    @classmethod
    def get_stats(cls):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö"""
        chords_dict = CHORDS_DATA.get('chords', {})
        metadata = CHORDS_DATA.get('metadata', {})

        return {
            'total_chords': len(chords_dict),
            'template_size_kb': metadata.get('template_size', 0) / 1024,
            'has_template': bool(CHORDS_DATA.get('template_image')),
            'has_json_config': bool(CHORDS_DATA.get('original_json_config')),
            'converter_version': metadata.get('converter_version', 'unknown')
        }


class ChordManager:
    """–£–ø—Ä–∞–≤–ª—è–µ—Ç –æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏ –∞–∫–∫–æ—Ä–¥–æ–≤ —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏–∑ JSON"""

    def __init__(self):
        self.temp_files = []
        self.base_image = None
        self._setup_temp_dir()
        self.load_template_image()

        if not ChordData.is_data_available():
            print("‚ùå –î–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã! –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä.")
        else:
            stats = ChordData.get_stats()
            print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
            print(f"   üé∏ –ê–∫–∫–æ—Ä–¥–æ–≤: {stats['total_chords']}")
            print(f"   üñºÔ∏è  –®–∞–±–ª–æ–Ω: {stats['template_size_kb']:.1f} KB")
            print(f"   üìã JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è: {'–µ—Å—Ç—å' if stats['has_json_config'] else '–Ω–µ—Ç'}")

    def _setup_temp_dir(self):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤"""
        self.temp_dir = tempfile.mkdtemp(prefix="guitar_chords_")

    def load_template_image(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —à–∞–±–ª–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏–∑ –¥–∞–Ω–Ω—ã—Ö"""
        if not HAS_PILLOW:
            print("‚ùå Pillow –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –±—É–¥—É—Ç –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è")
            return

        template_b64 = ChordData.get_template_image()
        if not template_b64:
            print("‚ùå –®–∞–±–ª–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
            return

        try:
            template_data = base64.b64decode(template_b64)
            self.base_image = Image.open(io.BytesIO(template_data))
            print(f"‚úÖ –®–∞–±–ª–æ–Ω –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω: {self.base_image.size}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à–∞–±–ª–æ–Ω–∞: {e}")

    def process_crop_rect(self, crop_rect):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç crop_rect"""
        if isinstance(crop_rect, list) and len(crop_rect) == 4:
            return {
                'x': crop_rect[0],
                'y': crop_rect[1],
                'width': crop_rect[2],
                'height': crop_rect[3]
            }
        elif isinstance(crop_rect, dict):
            return crop_rect
        else:
            return {'x': 0, 'y': 0, 'width': 400, 'height': 200}

    def generate_chord_image(self, json_parameters, display_type="fingers"):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –∏–∑ JSON –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"""
        print(f"üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è, —Ç–∏–ø: {display_type}")
        print(f"üìê –†–∞–∑–º–µ—Ä —à–∞–±–ª–æ–Ω–∞: {self.base_image.size if self.base_image else '–Ω–µ—Ç'}")
        print(f"üìã –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {list(json_parameters.keys())}")
        if not self.base_image or not HAS_DRAWING:
            print("‚ùå –ù–µ –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ: –Ω–µ—Ç —à–∞–±–ª–æ–Ω–∞ –∏–ª–∏ drawing_elements")
            return None

        try:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º crop_rect
            crop_rect_data = self.process_crop_rect(json_parameters.get('crop_rect', []))
            crop_x = crop_rect_data.get('x', 0)
            crop_y = crop_rect_data.get('y', 0)
            crop_width = crop_rect_data.get('width', 400)
            crop_height = crop_rect_data.get('height', 200)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≥—Ä–∞–Ω–∏—Ü—ã –æ–±—Ä–µ–∑–∫–∏
            img_width, img_height = self.base_image.size
            crop_x = max(0, min(crop_x, img_width - 1))
            crop_y = max(0, min(crop_y, img_height - 1))
            crop_width = max(1, min(crop_width, img_width - crop_x))
            crop_height = max(1, min(crop_height, img_height - crop_y))

            print(f"üìê –û–±—Ä–µ–∑–∫–∞: ({crop_x}, {crop_y}, {crop_width}, {crop_height}) –∏–∑ {img_width}x{img_height}")

            # –û–±—Ä–µ–∑–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            cropped_image = self.base_image.crop((crop_x, crop_y, crop_x + crop_width, crop_y + crop_height))
            chord_image = cropped_image.copy()
            draw = ImageDraw.Draw(chord_image)

            # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è
            drawing_data = self.prepare_drawing_data(json_parameters, display_type, crop_x, crop_y)
            if drawing_data and drawing_data.get('elements'):
                print(f"üéØ –û—Ç—Ä–∏—Å–æ–≤–∫–∞ {len(drawing_data['elements'])} —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ {chord_image.size}")
                draw_chord_elements(draw, drawing_data, display_type, chord_image.size)
            else:
                print("‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ buffer
            buffer = io.BytesIO()
            chord_image.save(buffer, format='PNG', optimize=True)
            image_data = buffer.getvalue()
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ: {len(image_data)} bytes, —Ä–∞–∑–º–µ—Ä: {chord_image.size}")
            return image_data

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")
            import traceback
            traceback.print_exc()
            return None

    def prepare_drawing_data(self, json_parameters, display_type, crop_x=0, crop_y=0):
        """–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∏–∑ JSON —Å —É—á–µ—Ç–æ–º —Å–º–µ—â–µ–Ω–∏—è"""
        if display_type == "fingers":
            elements = json_parameters.get('elements_fingers', [])
            print(f"üéØ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ø–∞–ª—å—Ü–µ–≤: {len(elements)}")
        elif display_type == "notes":
            elements = json_parameters.get('elements_notes', [])
            print(f"üéµ –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —ç–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –Ω–æ—Ç: {len(elements)}")
        else:
            elements = []
            print(f"‚ö†Ô∏è –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {display_type}")

        if not elements:
            print("‚ö†Ô∏è –ù–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏")
            return None

        # –ö–û–†–†–ï–ö–¢–ò–†–£–ï–ú –ö–û–û–†–î–ò–ù–ê–¢–´ –° –£–ß–ï–¢–û–ú CROP
        adjusted_elements = []
        for element in elements:
            if not isinstance(element, dict):
                continue

            element_type = element.get('type')
            element_data = element.get('data', {}).copy()

            # –ö–æ—Ä—Ä–µ–∫—Ç–∏—Ä—É–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã X –∏ Y
            if 'x' in element_data:
                element_data['x'] = element_data['x'] - crop_x
            if 'y' in element_data:
                element_data['y'] = element_data['y'] - crop_y

            adjusted_elements.append({
                'type': element_type,
                'data': element_data
            })

        # –í–´–í–û–î–ò–ú –°–ö–û–†–†–ï–ö–¢–ò–†–û–í–ê–ù–ù–´–ï –ö–û–û–†–î–ò–ù–ê–¢–´ –î–õ–Ø –û–¢–õ–ê–î–ö–ò
        print(f"üìä –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã (crop: {crop_x}, {crop_y}):")
        for i, element in enumerate(adjusted_elements):
            element_data = element.get('data', {})
            x = element_data.get('x', 0)
            y = element_data.get('y', 0)
            print(f"  {i}: ({x}, {y}) - {element.get('type')}")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        display_settings = json_parameters.get('display_settings', {})
        if display_settings:
            adjusted_elements = self.apply_display_settings(adjusted_elements, display_settings)

        return {'elements': adjusted_elements}

    def apply_display_settings(self, elements, display_settings):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        barre_outline = display_settings.get('barre_outline', 'none')
        note_outline = display_settings.get('note_outline', 'none')

        outline_widths = {
            "none": 0, "thin": 2, "medium": 4, "thick": 6
        }

        barre_width = outline_widths.get(barre_outline, 0)
        note_width = outline_widths.get(note_outline, 0)

        modified_elements = []
        for element in elements:
            if not isinstance(element, dict):
                continue

            element_type = element.get('type')
            element_data = element.get('data', {})

            if element_type == 'barre' and barre_width > 0:
                modified_element = element.copy()
                modified_element['data'] = element_data.copy()
                modified_element['data']['outline_width'] = barre_width
                modified_elements.append(modified_element)
            elif element_type == 'note' and note_width > 0:
                modified_element = element.copy()
                modified_element['data'] = element_data.copy()
                modified_element['data']['outline_width'] = note_width
                modified_elements.append(modified_element)
            else:
                modified_elements.append(element)

        return modified_elements

    def get_chord_variants(self, chord_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤–∞—Ä–∏–∞–Ω—Ç—ã –∞–∫–∫–æ—Ä–¥–∞"""
        if not ChordData.is_data_available():
            return []

        chord_data = ChordData.get_chord_data(chord_name)
        if not chord_data:
            print(f"‚ùå –ê–∫–∫–æ—Ä–¥ '{chord_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –¥–∞–Ω–Ω—ã—Ö")
            return []

        variants = chord_data.get('variants', [])

        # –î–û–ë–ê–í–õ–Ø–ï–ú variant_index –ö –ö–ê–ñ–î–û–ú–£ –í–ê–†–ò–ê–ù–¢–£
        for i, variant in enumerate(variants):
            variant['variant_index'] = i  # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–µ–∫—Å –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ get_chord_variant_data

        print(f"‚úÖ –ê–∫–∫–æ—Ä–¥ '{chord_name}': –Ω–∞–π–¥–µ–Ω–æ {len(variants)} –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤")
        return variants

    def get_chord_description(self, chord_name):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞"""
        return ChordData.get_chord_description(chord_name)

    def base64_to_pixmap(self, base64_data):
        """–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç base64 –≤ QPixmap —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏"""
        try:
            if not base64_data:
                return QPixmap()

            # –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Ä–∞–∑—Ä—ã–≤—ã —Å—Ç—Ä–æ–∫ –≤ base64 –¥–∞–Ω–Ω—ã—Ö
            clean_base64 = base64_data.replace('\n', '').replace('\\', '')
            image_data = base64.b64decode(clean_base64)

            # –°–æ–∑–¥–∞–µ–º QImage –∏–∑ –¥–∞–Ω–Ω—ã—Ö
            image = QImage()
            image.loadFromData(image_data)

            if image.isNull():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QImage –∏–∑ base64 –¥–∞–Ω–Ω—ã—Ö")
                return QPixmap()

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏
            if image.hasAlphaChannel():
                image = image.convertToFormat(QImage.Format_ARGB32)
            else:
                image = image.convertToFormat(QImage.Format_RGB32)

            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º QImage –≤ QPixmap
            pixmap = QPixmap.fromImage(image)

            if pixmap.isNull():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QPixmap –∏–∑ QImage")
                return QPixmap()

            return pixmap

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è pixmap: {e}")
            return QPixmap()

    def base64_to_temp_file(self, base64_data, extension):
        """–°–æ–∑–¥–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –∏–∑ base64 –¥–∞–Ω–Ω—ã—Ö"""
        try:
            if not base64_data:
                return None

            clean_base64 = base64_data.replace('\n', '').replace('\\', '')
            file_data = base64.b64decode(clean_base64)
            temp_file = tempfile.NamedTemporaryFile(
                delete=False,
                suffix=extension,
                dir=self.temp_dir
            )
            temp_file.write(file_data)
            temp_file.close()
            self.temp_files.append(temp_file.name)
            return temp_file.name
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
            return None

    def get_chord_image(self, chord_name, variant_index=0, display_type="fingers"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ –∫–∞–∫ QPixmap"""
        print(f"üé∏ –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {chord_name}, –≤–∞—Ä–∏–∞–Ω—Ç: {variant_index}, —Ç–∏–ø: {display_type}")

        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            print(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {variant_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return QPixmap()

        variant = variants[variant_index]
        json_parameters = variant.get('json_parameters', {})

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏–∑ JSON –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        image_data = self.generate_chord_image(json_parameters, display_type)
        if not image_data:
            return QPixmap()

        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ QPixmap
        pixmap = self.base64_to_pixmap(base64.b64encode(image_data).decode())

        if not pixmap.isNull():
            print(f"‚úÖ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∞–∫–∫–æ—Ä–¥–∞ '{chord_name}' —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ")
        else:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QPixmap –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ '{chord_name}'")

        return pixmap

    def get_chord_sound_path(self, chord_name, variant_index=0):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É –∑–≤—É–∫–æ–≤–æ–º—É —Ñ–∞–π–ª—É"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            return None

        sound_data = variants[variant_index].get('sound_data')
        if not sound_data:
            print(f"‚ö†Ô∏è –ù–µ—Ç –∑–≤—É–∫–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index} –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return None

        return self.base64_to_temp_file(sound_data, '.mp3')

    def get_chord_variant_data(self, chord_name, variant_index=0, display_type="fingers"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∞–∫–∫–æ—Ä–¥–∞"""
        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            print(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {variant_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return None

        variant = variants[variant_index]

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        json_parameters = variant.get('json_parameters', {})
        image_data = self.generate_chord_image(json_parameters, display_type)

        if not image_data:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index}")
            return None

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        image_path = self.base64_to_temp_file(base64.b64encode(image_data).decode(), '.png')
        sound_path = self.base64_to_temp_file(variant.get('sound_data'), '.mp3')

        result = {
            'image_path': image_path,
            'sound_path': sound_path,
            'description': variant.get('description', ''),
            'position': variant.get('position', 0),
            'display_type': display_type
        }

        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index}: image={bool(image_path)}, sound={bool(sound_path)}")
        return result

    def get_chord_variant_data_with_pixmap(self, chord_name, variant_index=0, display_type="fingers"):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ –∞–∫–∫–æ—Ä–¥–∞ —Å –≥–æ—Ç–æ–≤—ã–º QPixmap"""
        print(f"üéØ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index} –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}, —Ç–∏–ø: {display_type}")

        variants = self.get_chord_variants(chord_name)
        if not variants or variant_index >= len(variants):
            print(f"‚ùå –í–∞—Ä–∏–∞–Ω—Ç {variant_index} –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è –∞–∫–∫–æ—Ä–¥–∞ {chord_name}")
            return None

        variant = variants[variant_index]
        print(f"üîç –í–∞—Ä–∏–∞–Ω—Ç –¥–∞–Ω–Ω—ã—Ö: position={variant.get('position')}, description={variant.get('description')}")

        # –ü–†–û–í–ï–†–Ø–ï–ú –†–ê–ó–õ–ò–ß–ò–Ø –í JSON –ü–ê–†–ê–ú–ï–¢–†–ê–•
        json_params = variant.get('json_parameters', {})
        print(f"üìã JSON –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index}:")
        print(f"   - crop_rect: {json_params.get('crop_rect')}")
        print(f"   - elements_fingers: {len(json_params.get('elements_fingers', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")
        print(f"   - elements_notes: {len(json_params.get('elements_notes', []))} —ç–ª–µ–º–µ–Ω—Ç–æ–≤")

        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —Å–æ–∑–¥–∞–µ–º QPixmap
        image_data = self.generate_chord_image(json_params, display_type)

        if not image_data:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index}")
            return None

        pixmap = self.base64_to_pixmap(base64.b64encode(image_data).decode())
        if pixmap.isNull():
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å QPixmap –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ {variant_index}")
            return None

        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –∑–≤—É–∫–∞
        sound_path = self.base64_to_temp_file(variant.get('sound_data'), '.mp3')

        result = {
            'pixmap': pixmap,
            'sound_path': sound_path,
            'description': variant.get('description', ''),
            'position': variant.get('position', variant_index + 1),
            'display_type': display_type
        }

        print(f"‚úÖ –í–∞—Ä–∏–∞–Ω—Ç {variant_index} –∑–∞–≥—Ä—É–∂–µ–Ω: {pixmap.size().width()}x{pixmap.size().height()}")
        return result

    # ‚¨ÖÔ∏è –°–û–í–ú–ï–°–¢–ò–ú–û–°–¢–¨ –°–û –°–¢–ê–†–´–ú –ö–û–î–û–ú
    def get_chord_image_direct(self, chord_name, variant_index=0):
        """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å–æ —Å—Ç–∞—Ä—ã–º –∫–æ–¥–æ–º - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç fingers –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return self.get_chord_image(chord_name, variant_index, "fingers")

    def check_chord_transparency(self, chord_name, variant_index=0):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å (—Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å)"""
        pixmap = self.get_chord_image(chord_name, variant_index)
        if pixmap.isNull():
            return False

        temp_image = pixmap.toImage()
        has_transparency = temp_image.hasAlphaChannel()
        print(f"üîç –ê–∫–∫–æ—Ä–¥ '{chord_name}': {'—Å –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å—é' if has_transparency else '–±–µ–∑ –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç–∏'}")
        return has_transparency

    # ‚¨ÖÔ∏è –ù–û–í–´–ï –ú–ï–¢–û–î–´
    def get_display_types(self):
        """–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        return ChordData.get_display_types()

    def get_stats(self):
        """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–∞–Ω–Ω—ã—Ö"""
        return ChordData.get_stats()

    def get_original_json_config(self):
        """–ü–æ–ª—É—á–∏—Ç—å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é JSON –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é"""
        return ChordData.get_original_json_config()

    def get_available_chords(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return ChordData.get_all_chords()

    def get_chords_by_folder(self, folder_num):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∞–∫–∫–æ—Ä–¥—ã –∏–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–∏"""
        return ChordData.get_chords_by_folder(folder_num)

    def is_data_loaded(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–≥—Ä—É–∂–µ–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–æ—Ä–¥–æ–≤"""
        return ChordData.is_data_available()

    def cleanup(self):
        """–û—á–∏—â–∞–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
        for temp_file in self.temp_files:
            try:
                if os.path.exists(temp_file):
                    os.unlink(temp_file)
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ {temp_file}: {e}")

        self.temp_files.clear()

    def __del__(self):
        """–î–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä - –æ—á–∏—â–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã"""
        self.cleanup()

